import React, { useState, useEffect, useRef } from 'react';
import { useParams, useLocation, useNavigate } from 'react-router-dom';
import '../styles/Game.scss';

const Game = () => {
  const { roomCode } = useParams();
  const location = useLocation();
  const navigate = useNavigate();
  const [gameState, setGameState] = useState('–û—á—ñ–∫—É—î–º–æ –≥—Ä–∞–≤—Ü—ñ–≤...');
  const [role, setRole] = useState('');
  const [locationState, setLocationState] = useState('');
  const [topic, setTopic] = useState('');
  const [players, setPlayers] = useState([]);
  const [playerCount, setPlayerCount] = useState(0);
  const [gameStarted, setGameStarted] = useState(false);
  const [introducing, setIntroducing] = useState(false);
  const [currentPlayer, setCurrentPlayer] = useState('');
  const [nextPlayer, setNextPlayer] = useState('');
  const [microphoneActive, setMicrophoneActive] = useState(false);
  const [timer, setTimer] = useState(120); // –¢–∞–π–º–µ—Ä –Ω–∞ 2 —Ö–≤–∏–ª–∏–Ω–∏
  const [intervalId, setIntervalId] = useState(null); // –î–æ–¥–∞—î–º–æ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
  const ws = useRef(null);
  const peerConnections = useRef({});
  const localStream = useRef(null);
  const remoteAudio = useRef(new Audio());
  const playerName = location.state?.playerName || '–ë–µ–∑ —ñ–º–µ–Ω—ñ';

  useEffect(() => {
    ws.current = new WebSocket('ws://spy-server.onrender.com');

    ws.current.onopen = () => {
      console.log('Connected to WebSocket');
      ws.current.send(
        JSON.stringify({
          type: 'join-room',
          roomCode,
          playerName,
        })
      );
    };

    ws.current.onmessage = (message) => {
      const data = JSON.parse(message.data);
      console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', data);  // –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      switch (data.type) {
        case 'role':
          setRole(data.role);
          setTopic(data.topic);
          if (data.role === 'civilian') {
            setLocationState(data.location);
          }
          break;
        case 'game-started':
          setGameState('–ì—Ä–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å!');
          setGameStarted(true);
          break;
        case 'next-round':
          setGameState(`–†–∞—É–Ω–¥ ${data.round}`);
          break;
        case 'start-introduction':
          setGameState('–†–∞—É–Ω–¥ 1: –ó–Ω–∞–π–æ–º—Å—Ç–≤–æ');
          setIntroducing(true);
          setCurrentPlayer(data.players[0]);
          setNextPlayer(data.players[1]);
          setMicrophoneActive(true);
          startTimer(); // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –ø–æ—á–∞—Ç–∫—É –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞
          break;
        case 'next-introducer':
          setCurrentPlayer(data.currentPlayer);
          setNextPlayer(data.nextPlayer);
          setMicrophoneActive(true);
          resetTimer(); // –°–∫–∏–Ω—É—Ç–∏ —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
          break;
        case 'introduction-ended':
          setGameState('–ó–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–µ');
          setIntroducing(false);
          setMicrophoneActive(false);
          clearTimer(); // –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–∞–π–º–µ—Ä –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞
          break;
        case 'vote-result':
          setGameState(`–ì—Ä–∞–≤–µ—Ü—å ${data.suspect} –æ—Ç—Ä–∏–º–∞–≤ –Ω–∞–π–±—ñ–ª—å—à–µ –≥–æ–ª–æ—Å—ñ–≤`);
          break;
        case 'civilians-won':
          setGameState('–ú–∏—Ä–Ω—ñ –ø–µ—Ä–µ–º–æ–≥–ª–∏!');
          break;
        case 'spy-won':
          setGameState(`–®–ø–∏–≥—É–Ω ${data.spyName} –ø–µ—Ä–µ–º—ñ–≥!`);
          break;
        case 'game-ended':
          setGameState('–ì—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          navigate('/');
          break;
        case 'error':
          setGameState(`–ü–æ–º–∏–ª–∫–∞: ${data.message}`);
          break;
        case 'players-updated':
          setPlayers(data.players);
          setPlayerCount(data.players.length);
          break;

        // –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–∫—É –¥–ª—è WebRTC
        case 'offer':
          handleOffer(data);  // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–±—Ä–æ–±–∫–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó
          break;
        case 'answer':
          handleAnswer(data);  // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
          break;
        case 'ice-candidate':
          const peerConnection = peerConnections.current[data.playerId];
          if (peerConnection) {
            peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
          }
          break;

        default:
          console.log('–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', data.type);
      }
    };

    ws.current.onclose = () => {
      console.log('WebSocket –∑–∞–∫—Ä–∏—Ç–æ');
    };

    return () => {
      if (ws.current) {
        ws.current.close();
      }
    };
  }, [roomCode, playerName, navigate]);

  const startTimer = () => {
    setTimer(120); // –°–∫–∏–¥–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 2 —Ö–≤–∏–ª–∏–Ω–∏
    const newIntervalId = setInterval(() => {
      setTimer((prev) => {
        if (prev <= 1) {
          clearInterval(newIntervalId);
          finishIntroduction();
          return 0;
        }
        return prev - 1;
      });
    }, 1000); // –ó–º–µ–Ω—à–µ–Ω–Ω—è –Ω–∞ 1 —Å–µ–∫ –∑–∞ 1000 –º—Å
    setIntervalId(newIntervalId); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª
  };

  const resetTimer = () => {
    setTimer(120);
  };

  const clearTimer = () => {
    setTimer(0);
    if (intervalId) {
      clearInterval(intervalId); // –ó—É–ø–∏–Ω—è—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
      setIntervalId(null); // –û—á–∏—â–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    }
  };

  const createPeerConnection = (playerId) => {
    const peerConnection = new RTCPeerConnection({
      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }],
    });

    peerConnections.current[playerId] = peerConnection;

    localStream.current.getTracks().forEach((track) => {
      peerConnection.addTrack(track, localStream.current);
    });

    peerConnection.ontrack = (event) => {
      remoteAudio.current.srcObject = event.streams[0];
      remoteAudio.current.autoplay = true;
      remoteAudio.current.play();
    };

    peerConnection.onicecandidate = (event) => {
      if (event.candidate) {
        ws.current.send(JSON.stringify({
          type: 'ice-candidate',
          candidate: event.candidate,
          playerId,
          roomCode,
        }));
      }
    };

    return peerConnection;
  };

  const startLocalStream = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      localStream.current = stream;

      players.forEach((player) => {
        createPeerConnection(player.id);
      });
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω—É:', error);
    }
  };

  const handleOffer = (data) => {
    console.log('–û–±—Ä–æ–±–ª—è—î–º–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é:', data);  // –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    const offerPeerConnection = createPeerConnection(data.playerId);
    offerPeerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
    offerPeerConnection.createAnswer().then((answer) => {
      offerPeerConnection.setLocalDescription(answer);
      ws.current.send(JSON.stringify({ type: 'answer', answer, roomCode, playerId: data.playerId }));
    });
  };

  const handleAnswer = (data) => {
    console.log('–û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:', data);  // –õ–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    const answerPeerConnection = peerConnections.current[data.playerId];
    answerPeerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
  };

  const finishIntroduction = () => {
    ws.current.send(JSON.stringify({ type: 'finish-introduction', roomCode }));
    setMicrophoneActive(false);
    clearTimer();
  };

  useEffect(() => {
    if (gameStarted) {
      startLocalStream();
    }
  }, [gameStarted]);

  const handleStartGame = () => {
    ws.current.send(JSON.stringify({ type: 'start-game', roomCode }));
  };

  return (
    <div>
      <h1>–ì—Ä–∞: {roomCode}</h1>
      <p>–°—Ç–∞—Ç—É—Å –≥—Ä–∏: {gameState}</p>
      {role && <p>–í–∞—à–∞ —Ä–æ–ª—å: {role === 'spy' ? '–®–ø–∏–≥—É–Ω' : '–ú–∏—Ä–Ω–∏–π –∂–∏—Ç–µ–ª—å'}</p>}
      {locationState && <p>–õ–æ–∫–∞—Ü—ñ—è: {locationState}</p>}
      {topic && <p>–¢–µ–º–∞: {topic}</p>}

      <h2>–ì—Ä–∞–≤—Ü—ñ –≤ –∫—ñ–º–Ω–∞—Ç—ñ:</h2>
      <ul>
        {players.map((player, index) => (
          <li 
            key={index} 
            style={{ color: currentPlayer === player ? 'red' : 'black' }}
          >
            {player}
            {currentPlayer === player && <span>üîä</span>} {/* –î–∏–Ω–∞–º—ñ–∫ */}
          </li>
        ))}
      </ul>

      {playerCount >= 3 && !gameStarted && (
        <button onClick={handleStartGame}>–ü–æ—á–∞—Ç–∏ –≥—Ä—É</button>
      )}

      {introducing && (
        <div>
          <p>–ì—Ä–∞–≤–µ—Ü—å {currentPlayer} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è.</p>
          <p>–ó–∞–ª–∏—à–∏–ª–æ—Å—å —á–∞—Å—É: {timer} —Å–µ–∫—É–Ω–¥</p>
          {/* –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ —Ç–µ, —á–∏ —î –≤–∏ –ø–æ—Ç–æ—á–Ω–∏–º –≥—Ä–∞–≤—Ü–µ–º */}
          {microphoneActive && currentPlayer === playerName && ( // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏—Å—Ç—É–ø—É
            <button onClick={finishIntroduction}>–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏—Å—Ç—É–ø</button>
          )}
        </div>
      )}
    </div>
  );
};

export default Game;
